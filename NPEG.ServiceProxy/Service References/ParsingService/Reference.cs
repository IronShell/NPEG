//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;

namespace Npeg.ServiceProxy.ParsingService
{
	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "NpegData", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Service")]
	[Serializable]
	public class NpegData : object, IExtensibleDataObject, INotifyPropertyChanged
	{
		[OptionalField] private AstNode AstField;

		[OptionalField] private AExpression ParseTreeField;

		[OptionalField] private Warn[] WarningsField;
		[NonSerialized] private ExtensionDataObject extensionDataField;

		[DataMember]
		public AstNode Ast
		{
			get { return AstField; }
			set
			{
				if ((ReferenceEquals(AstField, value) != true))
				{
					AstField = value;
					RaisePropertyChanged("Ast");
				}
			}
		}

		[DataMember]
		public AExpression ParseTree
		{
			get { return ParseTreeField; }
			set
			{
				if ((ReferenceEquals(ParseTreeField, value) != true))
				{
					ParseTreeField = value;
					RaisePropertyChanged("ParseTree");
				}
			}
		}

		[DataMember]
		public Warn[] Warnings
		{
			get { return WarningsField; }
			set
			{
				if ((ReferenceEquals(WarningsField, value) != true))
				{
					WarningsField = value;
					RaisePropertyChanged("Warnings");
				}
			}
		}

		#region IExtensibleDataObject Members

		[Browsable(false)]
		public ExtensionDataObject ExtensionData
		{
			get { return extensionDataField; }
			set { extensionDataField = value; }
		}

		#endregion

		#region INotifyPropertyChanged Members

		public event PropertyChangedEventHandler PropertyChanged;

		#endregion

		protected void RaisePropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler propertyChanged = PropertyChanged;
			if ((propertyChanged != null))
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "AstNode", Namespace = "http://schemas.datacontract.org/2004/07/NPEG")]
	[Serializable]
	public class AstNode : object, IExtensibleDataObject, INotifyPropertyChanged
	{
		[OptionalField] private AstNode[] ChildrenField;

		[OptionalField] private TokenMatch TokenField;
		[NonSerialized] private ExtensionDataObject extensionDataField;

		[DataMember]
		public AstNode[] Children
		{
			get { return ChildrenField; }
			set
			{
				if ((ReferenceEquals(ChildrenField, value) != true))
				{
					ChildrenField = value;
					RaisePropertyChanged("Children");
				}
			}
		}

		[DataMember]
		public TokenMatch Token
		{
			get { return TokenField; }
			set
			{
				if ((ReferenceEquals(TokenField, value) != true))
				{
					TokenField = value;
					RaisePropertyChanged("Token");
				}
			}
		}

		#region IExtensibleDataObject Members

		[Browsable(false)]
		public ExtensionDataObject ExtensionData
		{
			get { return extensionDataField; }
			set { extensionDataField = value; }
		}

		#endregion

		#region INotifyPropertyChanged Members

		public event PropertyChangedEventHandler PropertyChanged;

		#endregion

		protected void RaisePropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler propertyChanged = PropertyChanged;
			if ((propertyChanged != null))
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "AExpression", Namespace = "http://schemas.datacontract.org/2004/07/NPEG")]
	[Serializable]
	[KnownType(typeof (ALeaf))]
	[KnownType(typeof (RecursionCall))]
	[KnownType(typeof (AnyCharacter))]
	[KnownType(typeof (DynamicBackReference))]
	[KnownType(typeof (CodePoint))]
	[KnownType(typeof (CharacterClass))]
	[KnownType(typeof (Fatal))]
	[KnownType(typeof (Literal))]
	[KnownType(typeof (Warn))]
	[KnownType(typeof (AComposite))]
	[KnownType(typeof (CapturingGroup))]
	[KnownType(typeof (LimitingRepetition))]
	[KnownType(typeof (NotPredicate))]
	[KnownType(typeof (OneOrMore))]
	[KnownType(typeof (Optional))]
	[KnownType(typeof (PrioritizedChoice))]
	[KnownType(typeof (RecursionCreate))]
	[KnownType(typeof (Sequence))]
	[KnownType(typeof (ZeroOrMore))]
	[KnownType(typeof (AndPredicate))]
	public class AExpression : object, IExtensibleDataObject, INotifyPropertyChanged
	{
		[NonSerialized] private ExtensionDataObject extensionDataField;

		#region IExtensibleDataObject Members

		[Browsable(false)]
		public ExtensionDataObject ExtensionData
		{
			get { return extensionDataField; }
			set { extensionDataField = value; }
		}

		#endregion

		#region INotifyPropertyChanged Members

		public event PropertyChangedEventHandler PropertyChanged;

		#endregion

		protected void RaisePropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler propertyChanged = PropertyChanged;
			if ((propertyChanged != null))
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "Warn", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class Warn : ALeaf
	{
		[OptionalField] private string MessageField;

		[OptionalField] private int PositionField;

		[DataMember]
		public string Message
		{
			get { return MessageField; }
			set
			{
				if ((ReferenceEquals(MessageField, value) != true))
				{
					MessageField = value;
					RaisePropertyChanged("Message");
				}
			}
		}

		[DataMember]
		public int Position
		{
			get { return PositionField; }
			set
			{
				if ((PositionField.Equals(value) != true))
				{
					PositionField = value;
					RaisePropertyChanged("Position");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "TokenMatch", Namespace = "http://schemas.datacontract.org/2004/07/NPEG")]
	[Serializable]
	public class TokenMatch : object, IExtensibleDataObject, INotifyPropertyChanged
	{
		[OptionalField] private int EndField;

		[OptionalField] private string NameField;

		[OptionalField] private int StartField;

		[OptionalField] private string ValueField;
		[NonSerialized] private ExtensionDataObject extensionDataField;

		[DataMember]
		public int End
		{
			get { return EndField; }
			set
			{
				if ((EndField.Equals(value) != true))
				{
					EndField = value;
					RaisePropertyChanged("End");
				}
			}
		}

		[DataMember]
		public string Name
		{
			get { return NameField; }
			set
			{
				if ((ReferenceEquals(NameField, value) != true))
				{
					NameField = value;
					RaisePropertyChanged("Name");
				}
			}
		}

		[DataMember]
		public int Start
		{
			get { return StartField; }
			set
			{
				if ((StartField.Equals(value) != true))
				{
					StartField = value;
					RaisePropertyChanged("Start");
				}
			}
		}

		[DataMember]
		public string Value
		{
			get { return ValueField; }
			set
			{
				if ((ReferenceEquals(ValueField, value) != true))
				{
					ValueField = value;
					RaisePropertyChanged("Value");
				}
			}
		}

		#region IExtensibleDataObject Members

		[Browsable(false)]
		public ExtensionDataObject ExtensionData
		{
			get { return extensionDataField; }
			set { extensionDataField = value; }
		}

		#endregion

		#region INotifyPropertyChanged Members

		public event PropertyChangedEventHandler PropertyChanged;

		#endregion

		protected void RaisePropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler propertyChanged = PropertyChanged;
			if ((propertyChanged != null))
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "ALeaf", Namespace = "http://schemas.datacontract.org/2004/07/NPEG")]
	[Serializable]
	[KnownType(typeof (RecursionCall))]
	[KnownType(typeof (AnyCharacter))]
	[KnownType(typeof (DynamicBackReference))]
	[KnownType(typeof (CodePoint))]
	[KnownType(typeof (CharacterClass))]
	[KnownType(typeof (Fatal))]
	[KnownType(typeof (Literal))]
	[KnownType(typeof (Warn))]
	public class ALeaf : AExpression
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "RecursionCall", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class RecursionCall : ALeaf
	{
		[OptionalField] private string FunctionNameField;

		[DataMember]
		public string FunctionName
		{
			get { return FunctionNameField; }
			set
			{
				if ((ReferenceEquals(FunctionNameField, value) != true))
				{
					FunctionNameField = value;
					RaisePropertyChanged("FunctionName");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "AnyCharacter", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class AnyCharacter : ALeaf
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "DynamicBackReference", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class DynamicBackReference : ALeaf
	{
		[OptionalField] private string BackReferenceNameField;

		[OptionalField] private bool IsCaseSensitiveField;

		[DataMember]
		public string BackReferenceName
		{
			get { return BackReferenceNameField; }
			set
			{
				if ((ReferenceEquals(BackReferenceNameField, value) != true))
				{
					BackReferenceNameField = value;
					RaisePropertyChanged("BackReferenceName");
				}
			}
		}

		[DataMember]
		public bool IsCaseSensitive
		{
			get { return IsCaseSensitiveField; }
			set
			{
				if ((IsCaseSensitiveField.Equals(value) != true))
				{
					IsCaseSensitiveField = value;
					RaisePropertyChanged("IsCaseSensitive");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "CodePoint", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class CodePoint : ALeaf
	{
		[OptionalField] private string MatchField;

		[DataMember]
		public string Match
		{
			get { return MatchField; }
			set
			{
				if ((ReferenceEquals(MatchField, value) != true))
				{
					MatchField = value;
					RaisePropertyChanged("Match");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "CharacterClass", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class CharacterClass : ALeaf
	{
		[OptionalField] private string ClassExpressionField;

		[DataMember]
		public string ClassExpression
		{
			get { return ClassExpressionField; }
			set
			{
				if ((ReferenceEquals(ClassExpressionField, value) != true))
				{
					ClassExpressionField = value;
					RaisePropertyChanged("ClassExpression");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "Fatal", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class Fatal : ALeaf
	{
		[OptionalField] private string MessageField;

		[DataMember]
		public string Message
		{
			get { return MessageField; }
			set
			{
				if ((ReferenceEquals(MessageField, value) != true))
				{
					MessageField = value;
					RaisePropertyChanged("Message");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "Literal", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.Terminals")]
	[Serializable]
	public class Literal : ALeaf
	{
		[OptionalField] private bool IsCaseSensitiveField;

		[OptionalField] private string MatchTextField;

		[DataMember]
		public bool IsCaseSensitive
		{
			get { return IsCaseSensitiveField; }
			set
			{
				if ((IsCaseSensitiveField.Equals(value) != true))
				{
					IsCaseSensitiveField = value;
					RaisePropertyChanged("IsCaseSensitive");
				}
			}
		}

		[DataMember]
		public string MatchText
		{
			get { return MatchTextField; }
			set
			{
				if ((ReferenceEquals(MatchTextField, value) != true))
				{
					MatchTextField = value;
					RaisePropertyChanged("MatchText");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "AComposite", Namespace = "http://schemas.datacontract.org/2004/07/NPEG")]
	[Serializable]
	[KnownType(typeof (CapturingGroup))]
	[KnownType(typeof (LimitingRepetition))]
	[KnownType(typeof (NotPredicate))]
	[KnownType(typeof (OneOrMore))]
	[KnownType(typeof (Optional))]
	[KnownType(typeof (PrioritizedChoice))]
	[KnownType(typeof (RecursionCreate))]
	[KnownType(typeof (Sequence))]
	[KnownType(typeof (ZeroOrMore))]
	[KnownType(typeof (AndPredicate))]
	public class AComposite : AExpression
	{
		[OptionalField] private AExpression[] ChildrenField;

		[DataMember]
		public AExpression[] Children
		{
			get { return ChildrenField; }
			set
			{
				if ((ReferenceEquals(ChildrenField, value) != true))
				{
					ChildrenField = value;
					RaisePropertyChanged("Children");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "CapturingGroup", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class CapturingGroup : AComposite
	{
		[OptionalField] private bool DoCreateCustomAstNodeField;

		[OptionalField] private bool DoReplaceBySingleChildNodeField;

		[OptionalField] private string NameField;

		[DataMember]
		public bool DoCreateCustomAstNode
		{
			get { return DoCreateCustomAstNodeField; }
			set
			{
				if ((DoCreateCustomAstNodeField.Equals(value) != true))
				{
					DoCreateCustomAstNodeField = value;
					RaisePropertyChanged("DoCreateCustomAstNode");
				}
			}
		}

		[DataMember]
		public bool DoReplaceBySingleChildNode
		{
			get { return DoReplaceBySingleChildNodeField; }
			set
			{
				if ((DoReplaceBySingleChildNodeField.Equals(value) != true))
				{
					DoReplaceBySingleChildNodeField = value;
					RaisePropertyChanged("DoReplaceBySingleChildNode");
				}
			}
		}

		[DataMember]
		public string Name
		{
			get { return NameField; }
			set
			{
				if ((ReferenceEquals(NameField, value) != true))
				{
					NameField = value;
					RaisePropertyChanged("Name");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "LimitingRepetition", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class LimitingRepetition : AComposite
	{
		[OptionalField] private int? MaxField;

		[OptionalField] private int? MinField;

		[DataMember]
		public int? Max
		{
			get { return MaxField; }
			set
			{
				if ((MaxField.Equals(value) != true))
				{
					MaxField = value;
					RaisePropertyChanged("Max");
				}
			}
		}

		[DataMember]
		public int? Min
		{
			get { return MinField; }
			set
			{
				if ((MinField.Equals(value) != true))
				{
					MinField = value;
					RaisePropertyChanged("Min");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "NotPredicate", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class NotPredicate : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "OneOrMore", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class OneOrMore : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "Optional", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class Optional : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "PrioritizedChoice", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class PrioritizedChoice : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "RecursionCreate", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class RecursionCreate : AComposite
	{
		[OptionalField] private string FunctionNameField;

		[DataMember]
		public string FunctionName
		{
			get { return FunctionNameField; }
			set
			{
				if ((ReferenceEquals(FunctionNameField, value) != true))
				{
					FunctionNameField = value;
					RaisePropertyChanged("FunctionName");
				}
			}
		}
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "Sequence", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class Sequence : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "ZeroOrMore", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class ZeroOrMore : AComposite
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
	[DataContract(Name = "AndPredicate", Namespace = "http://schemas.datacontract.org/2004/07/NPEG.NonTerminals")]
	[Serializable]
	public class AndPredicate : AComposite
	{
	}

	[GeneratedCode("System.ServiceModel", "4.0.0.0")]
	[ServiceContract(ConfigurationName = "ParsingService.IParsingService")]
	public interface IParsingService
	{
		[OperationContract(Action = "http://tempuri.org/IParsingService/Parse",
			ReplyAction = "http://tempuri.org/IParsingService/ParseResponse")]
		NpegData Parse(string rules, byte[] input);
	}

	[GeneratedCode("System.ServiceModel", "4.0.0.0")]
	public interface IParsingServiceChannel : IParsingService, IClientChannel
	{
	}

	[DebuggerStepThrough]
	[GeneratedCode("System.ServiceModel", "4.0.0.0")]
	public partial class ParsingServiceClient : ClientBase<IParsingService>, IParsingService
	{
		public ParsingServiceClient()
		{
		}

		public ParsingServiceClient(string endpointConfigurationName) :
			base(endpointConfigurationName)
		{
		}

		public ParsingServiceClient(string endpointConfigurationName, string remoteAddress) :
			base(endpointConfigurationName, remoteAddress)
		{
		}

		public ParsingServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
			base(endpointConfigurationName, remoteAddress)
		{
		}

		public ParsingServiceClient(Binding binding, EndpointAddress remoteAddress) :
			base(binding, remoteAddress)
		{
		}

		#region IParsingService Members

		public NpegData Parse(string rules, byte[] input)
		{
			return base.Channel.Parse(rules, input);
		}

		#endregion
	}
}